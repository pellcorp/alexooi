package $configuration.packageName;

import au.com.alexooi.mojos.advent.api.persistence.PojoPersistenceManagerRegistry;
import au.com.alexooi.mojos.advent.api.persistence.PojoPersistenceManager;
import au.com.alexooi.mojos.advent.api.provisioning.DefaultPojoProviderRegistry;
import au.com.alexooi.mojos.advent.api.listeners.PojoUpdateListenerRegistry;

#set( $objectType = "$configuration.packageName.$configuration.className")
#set( $pojoUpdateListenerName = "$configuration.packageName.$configuration.className")
#set( $pojoUpdateListenerFqn = "$configuration.packageName.${configuration.className}UpdateListener")
/**
 * Auto-generated source code. Do NOT ALTER!
 */
public class $builderClassName
{
    public static $builderClassName create${configuration.className}()
    {
        return new $builderClassName();
    }

    private final $objectType theObject;
    private final ${pojoUpdateListenerFqn} updateListener;

    private $builderClassName()
    {
        this.theObject = DefaultPojoProviderRegistry.getProvider(${objectType}.class).newInstance();
        this.updateListener = (${configuration.packageName}.${configuration.className}UpdateListener)
            PojoUpdateListenerRegistry.getUpdateListener(${objectType}.class);
    }

#foreach( $field in $configuration.fields)
#foreach( $builderMethod in $field.builderMethods )
#set( $templateName = "_" + "$builderMethod.type.template" + ".vm")
#parse( $templateName )
#end
#end
#foreach( $extraMethod in $configuration.extraMethods )
#set( $templateName = "_" + "$extraMethod.type.template" + ".vm")
#parse( $templateName )
#end
    public $objectType build()
    {
        if(updateListener != null)
        {
            updateListener.onBuild(theObject);
        }
        return this.theObject;
    }

    public $objectType persist()
    {
        if(updateListener != null)
        {
            updateListener.onPersist(theObject);
        }
        PojoPersistenceManager<${objectType}> manager =
            PojoPersistenceManagerRegistry.getManager(${objectType}.class);
        return manager.persist(theObject);
    }
}

